#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/light_sensor.h>
#include <stdio.h>

// Constants
#define TIME_STEP 64
#define MAX_SPEED 6.28

// Sensor thresholds
#define OBSTACLE_THRESHOLD 100.0
#define LIGHT_THRESHOLD 200.0 // Threshold for detecting a light source

// Sensor names
const char *DISTANCE_SENSOR_NAMES[8] = {"ds1", "ds2", "ds3", "ds4", "ds5", "ds6", "ds7", "ds8"};
#define LEFT_LIGHT_SENSOR "ls1"
#define RIGHT_LIGHT_SENSOR "ls2"

// Function prototypes
void set_motor_speed(WbDeviceTag left_motor, WbDeviceTag right_motor, double left_speed, double right_speed);

int main() {
  // Initialize Webots API
  wb_robot_init();

  // Motors
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  wb_motor_set_velocity(left_motor, 0.0);
  wb_motor_set_velocity(right_motor, 0.0);

  // Distance sensors
  WbDeviceTag distance_sensors[8];
  double distance_values[8];
  for (int i = 0; i < 8; i++) {
    distance_sensors[i] = wb_robot_get_device(DISTANCE_SENSOR_NAMES[i]);
    wb_distance_sensor_enable(distance_sensors[i], TIME_STEP);
  }

  // Light sensors
  WbDeviceTag left_light_sensor = wb_robot_get_device(LEFT_LIGHT_SENSOR);
  WbDeviceTag right_light_sensor = wb_robot_get_device(RIGHT_LIGHT_SENSOR);
  wb_light_sensor_enable(left_light_sensor, TIME_STEP);
  wb_light_sensor_enable(right_light_sensor, TIME_STEP);

  // Main loop
  while (wb_robot_step(TIME_STEP) != -1) {
    // Read distance sensor values
    for (int i = 0; i < 8; i++) {
      distance_values[i] = wb_distance_sensor_get_value(distance_sensors[i]);
    }

    // Read light sensor values
    double left_light = wb_light_sensor_get_value(left_light_sensor);
    double right_light = wb_light_sensor_get_value(right_light_sensor);

    // Debugging outputs
    printf("Light Sensors: Left: %f, Right: %f\n", left_light, right_light);
    for (int i = 0; i < 8; i++) {
      printf("Distance Sensor %d: %f\n", i + 1, distance_values[i]);
    }

    // Light detection logic
    if (left_light > LIGHT_THRESHOLD || right_light > LIGHT_THRESHOLD) {
      printf("Light source detected! Stopping robot.\n");
      set_motor_speed(left_motor, right_motor, 0.0, 0.0);
      break; // Stop robot when a light source is detected
    }

    // Movement logic (Right-hand rule)
    double left_speed = MAX_SPEED;
    double right_speed = MAX_SPEED;

    // Check for obstacles
    if (distance_values[0] < OBSTACLE_THRESHOLD && distance_values[1] < OBSTACLE_THRESHOLD) {
      // Dead end, turn around
      left_speed = MAX_SPEED;
      right_speed = -MAX_SPEED;
      printf("Dead end detected. Turning around.\n");
    } else if (distance_values[1] < OBSTACLE_THRESHOLD) {
      // Obstacle on the right, turn left
      left_speed = MAX_SPEED / 2;
      right_speed = MAX_SPEED;
      printf("Turning left.\n");
    } else if (distance_values[0] < OBSTACLE_THRESHOLD) {
      // Obstacle on the left, turn right
      left_speed = MAX_SPEED;
      right_speed = MAX_SPEED / 2;
      printf("Turning right.\n");
    } else {
      // No obstacles, follow the wall on the right (right-hand rule)
      if (distance_values[7] > OBSTACLE_THRESHOLD) {
        // Wall detected on the right
        left_speed = MAX_SPEED / 2;
        right_speed = MAX_SPEED;
        printf("Following right wall.\n");
      } else {
        // No wall on the right, veer towards it
        left_speed = MAX_SPEED;
        right_speed = MAX_SPEED / 2;
        printf("Searching for right wall.\n");
      }
    }

    // Set motor speeds
    set_motor_speed(left_motor, right_motor, left_speed, right_speed);
  }

  // Cleanup
  wb_robot_cleanup();
  return 0;
}

// Function to set motor speeds
void set_motor_speed(WbDeviceTag left_motor, WbDeviceTag right_motor, double left_speed, double right_speed) {
  wb_motor_set_velocity(left_motor, left_speed);
  wb_motor_set_velocity(right_motor, right_speed);
}
